# class A():
#     pass
#
# a = A()
# b = A()
# print(id(a))
# print(id(b))

# class B():
#     def __init__(self):
#         print("B init")
#
#     def run(self):
#         print("B run func")
#
# class A(object):
#     def run(self):
#         print("A run func")
#
#     def __new__(cls, a):
#         print("new", a)
#         if a > 10:
#             return super(A, cls).__new__(cls)
#         return B()
#
#     def __init__(self, a):
#         print("init", a)

# a1 = A(5)
# a1.run()
# a2 = A(20)
# a2.run()


# class A_Dog_like(object):
#
#     __instance = None
#
#     def __new__(cls, *args, **kwargs):
#         if cls.__instance == None:
#             cls.__instance = object.__new__(cls)
#             return cls.__instance
#         else:
#             return cls.__instance
#
# a = A_Dog_like()
# print(id(a))
# b = A_Dog_like()
# print(id(b))

#
# _instance 判断一个对象是否是一个已知类型
class SingleTon(object):
    def __new__(cls, *args, **kwargs):
        if not hasattr(cls, '_instance'):
            cls._instance = super().__new__(cls, *args, **kwargs)
        # return super().__new__(cls, *args, **kwargs)
        return cls._instance
#
class Foo(SingleTon):
    pass

if __name__ == '__main__':
    f1 = Foo()
    f2 = Foo()
    print('f1的id:',id(f1))
    print('f2的id:',id(f2))